// <copyright file="PreValidateAccountUpdate.cs" company="Microsoft">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>6/30/2015 8:21:23 PM</date>
// <summary>Implements the PreValidateAccountUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace TEST06302015.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;

    /// <summary>
    /// PreValidateAccountUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PreValidateAccountUpdate : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidateAccountUpdate"/> class.
        /// </summary>
        public PreValidateAccountUpdate()
            : base(typeof(PreValidateAccountUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Update", "account", new Action<LocalPluginContext>(ExecutePreValidateAccountUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreAccountUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }
            // TODO: Implement your custom Plug-in business logic.
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];

                var query = new QueryExpression("account");

                var columnNames = new[] { "fullname", "accountid" };


                if (entity.LogicalName == "account")
                {

                    string entityDes = "Test plugin - Test 06302015";
                    try
                    {
                        if (entity.Attributes.Contains("description"))
                        {
                            entity.Attributes["description"] = entityDes;
                        }
                        else
                        {
                            entity.Attributes.Add("description", entityDes);
                        }
                    }
                    catch (FaultException ex)
                    {
                        throw new InvalidPluginExecutionException("Issues with the plugin", ex);
                    }
                }
            }

                    }
    }
}
